//9
#Область ОписаниеПеременных
&НаКлиенте
Перем МассивСтрокФайлаНРег; // Массив строк в нижнем регистре

&НаКлиенте
Перем ОписаниеОператорныхСкобок; // Массив структур

&НаКлиенте
Перем СерверныеМетоды; // Массив строк

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	   
	ИнициализироватьПараметрыФормы();
		
	МассивПроверок = Новый Массив(); 
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияКонструкцииСсылкаСсылка",
		"Контроль наличия конструкции Ссылка.Ссылка",
		Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияРазыменования",
		"Контроль наличия разыменования",
		Истина,
		Истина)); 
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияУсловияНеРавно",
		"Контроль наличия условия Не равно",
		Истина,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияУсловияИли",
		"Контроль наличия условия ИЛИ",
		Истина,
		Истина));

	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияУсловияОбъединить",
		"Контроль наличия условия ОБЪЕДИНИТЬ",
		Истина,
		Истина));

	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольМусорныхКомментариев15КомментариевПодряд",
		"Контроль мусорных комментариев (15 комментариев подряд без учёта незначащих строк между ними)",
		Истина,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольПустыхПроцедурИФункций",
		"Контроль пустых процедур и функций",
		Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольПолностьюЗакомментированныхПроцедурИФункций",
		"Контроль полностью закомментированных процедур и функций (без работающего кода внутри них)",
		Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияПолноеСоединение",
		"Контроль наличия ""ПОЛНОЕ СОЕДИНЕНИЕ""",
		Истина,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияНесколькихОператоровВСтроке",
		"Контроль наличия нескольких операторов в одной строке",
		Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияПовторяющегосяКода",
		"(!!!Длительное выполнение) Контроль наличия повторяющегося кода",
	    Истина,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияВиртуальныхТаблицБезПараметров",
		"Контроль наличия виртуальных таблиц без параметров",
	    Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияВложенныхЗапросов",
		"Контроль наличия вложенных запросов",
	 	Ложь,
		Истина));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаПревышениеВложенности",
		СтрШаблон("Превышение допустимой вложенности операторных скобок (%1)",ПредельныйУровеньВложенности)));
		
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияКонструкцииОбработкиИсключения",
		"Проверка на наличие конструкции обработки исключений Попытка..КонецПопытки"));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияЗапросовВЦикле",
		"Поиск явных и неявгных запросов в серверных методах. Правила поиска запросов в процедуре НайтиЗапросыВДиапозонеСтрок"));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаличияВызововСервераВЦикле",
		"Поиск явных вызовов серверных методов в цикле"));
	
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаПревышениеКоличестваВременныхТаблиц",
		СтрШаблон("В запросе используется больше %1 временных таблиц",ПредельноеКоличествоВременныхТаблиц)));
		
	МассивПроверок.Добавить(Новый Структура("ИмяПроцедуры,Описание,ТребуетсяАнализ,РаботаИзЛюбойБазы",
		"КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа",
		СтрШаблон("Получение в запросе через точку от полей составного типа")));

		
	Для Каждого ТекПроверка Из МассивПроверок Цикл
		ЗаполнитьЗначенияСвойств(Проверки.Добавить(),ТекПроверка);
	КонецЦикла;
	        
	Если ПараметрЗапуска <> "" Тогда
		ВыполнитьПроверкуПоСценарию(); 	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПараметрыФормы()
	
	// Инициализация параметров	
	ПредельныйУровеньВложенности = 4;
	ПредельноеКоличествоВременныхТаблиц = 7;
	
	ОписаниеОператорныхСкобок = Новый Массив;
	Макет = ПолучитьМакет("КлючевыеСловаСекций");
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		Описание = Новый Структура();
		Описание.Вставить("Секция"			,Макет.Область(Сч,1).Текст);
		Описание.Вставить("НачинаетсяС"		,Макет.Область(Сч,2).Текст);
		Описание.Вставить("ЗаканчиваетсяНа"	,Макет.Область(Сч,3).Текст);
		Описание.Вставить("ЭтоНачало"		,ОписаниеБулево.ПривестиЗначение(Макет.Область(Сч,4).Текст));
		ОписаниеОператорныхСкобок.Добавить(Описание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПользовательВыбралФайл" Тогда
		
		ТекущийИндексМассиваФайловGitHub = Параметр;
		
		ПолучитьСодержимоеФайлаGitHub();
		
	ИначеЕсли ИмяСобытия = "АвтоматическаяПроверка" Тогда
		
		ВыбратьПроверитьФайлыИзКоммитаGitHub();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ТекДанные = Элемент.ТекущиеДанные;
	
	ВыделитьДиапозонСтрокМодуля(ТекДанные.НомерСтроки,ТекДанные.НомерПоследнейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМодуляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	ВыделитьДиапозонСтрокМодуля(ТекДанные.ПерваяСтрока,ТекДанные.ПоследняяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодуляПриИзменении(Элемент)
	ПриИзмененииТекстаМодуля();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекстаМодуля()
	ОбновитьСтруктуруМодуля();
	ОбновитьТаблицуЗапросов();
КонецПроцедуры


&НаКлиенте
Процедура ВыделитьДиапозонСтрокМодуля(НомерПервойСтроки, НомерПоследнейСтроки)
	
	Если НомерПервойСтроки = 0 Тогда
		Возврат;
	КонецЕсли;

	Если НомерПоследнейСтроки = 0 Тогда
		КонецВыделения = НомерПервойСтроки+1;
	Иначе
		КонецВыделения = НомерПоследнейСтроки+1; // Добавим 1 для выделения последней
	КонецЕсли;
		
	ТекущийЭлемент = Элементы.ТекстМодуля;
	Элементы.ТекстМодуля.УстановитьГраницыВыделения(НомерПервойСтроки,1,КонецВыделения,1);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМодуля()
	
	СтруктураМодуля.ПолучитьЭлементы().Очистить();
	ОбновитьСтруктуруМодуляРекурсивно(СтруктураМодуля,0);
	
	СерверныеМетоды = Новый Массив;
	
	Для Каждого ТекСтрока Из СтруктураМодуля.ПолучитьЭлементы() Цикл
		
		Если СтрНачинаетсяС(ТекСтрока.Директива, "НаКлиенте") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетода = ПолучитьИмяМетода(ТекСтрока.ПерваяСтрока);
		Если Не ПустаяСтрока(ИмяМетода) Тогда 
			СерверныеМетоды.Добавить(ИмяМетода);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМодуляРекурсивно(ТекущаяВетка,НомерСтроки)
			
	СекцияЗакончилась = Ложь;
	ТекущаяДиректива = "";
	
	Пока НомерСтроки <> ТекстМодуля.КоличествоСтрок() И Не СекцияЗакончилась Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);	
		ОчиститьСтрокуОтКомментария(СтрокаКода);
		
		Если ПустаяСтрока(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоДирективаКомпиляции(НомерСтроки, ТекущаяДиректива) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеСкобок = Неопределено;
		
		Если Не ЭтоНачалоКонецОператорныхСкобок(НомерСтроки, ОписаниеСкобок) Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ОписаниеСкобок.ЭтоНачало Тогда 
			
			НоваяВетка = ТекущаяВетка.ПолучитьЭлементы().Добавить();
			НоваяВетка.Секция 		= ОписаниеСкобок.Секция;
			НоваяВетка.ПерваяСтрока = НомерСтроки;
			НоваяВетка.Директива    = ТекущаяДиректива;
			
			ОбновитьСтруктуруМодуляРекурсивно(НоваяВетка,НомерСтроки);
			
		Иначе
			
			Если ТипЗнч(ТекущаяВетка) <> Тип ("ДанныеФормыЭлементДерева") Тогда
				// ошибка при формировании дерева.
			КонецЕсли;
			
			ТекущаяВетка.ПоследняяСтрока = НомерСтроки;
			ТекущаяВетка = ?(ТекущаяВетка.ПолучитьРодителя()=Неопределено,СтруктураМодуля,ТекущаяВетка.ПолучитьРодителя());
			СекцияЗакончилась = Истина;
			
		КонецЕсли;		
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	ВыделитьДиапозонСтрокМодуля(ТекДанные.ПерваяСтрока,ТекДанные.ПоследняяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЗапросов()
	
	// Ищем ключевоее слово ВЫБРАТЬ.
	// Все строки текста после этого считаем запросом
	// Обнуляем после того, как закончится текст 
	
	ТаблицаЗапросов.Очистить();
	
	МыВЗапросе = Ложь;
	ВстречалиСловоВыбрать = Ложь; 
	ПерваяСтрокаЗапроса = 0;
	ПоследняяСтрокаЗапроса = 0;
	ТекстТекущегоЗапроса = "";
	
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);	
		ОчиститьСтрокуОтКомментария(СтрокаКода);
		
		Если ПустаяСтрока(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоложениеСловаВыбрать = СтрНайти(НРег(СтрокаКода),"выбрать");
		Если ПоложениеСловаВыбрать > 0 
			И Сред(СтрокаКода,ПоложениеСловаВыбрать+7,1) <> "(" Тогда // и это не метод Выбрать(
			// Предположим, что это начало запроса
			ВстречалиСловоВыбрать = Истина;
			ПерваяСтрокаЗапроса = НомерСтроки;
			ТекстТекущегоЗапроса = ТекстТекущегоЗапроса + Сред(СтрокаКода,ПоложениеСловаВыбрать);
		КонецЕсли;
		
		Если ЭтоТекст(СтрокаКода) И ВстречалиСловоВыбрать Тогда
			
			СтрокаЗапроса = СтрЗаменить(СтрокаКода,"|",Символы.ПС);
			
			Если Не МыВЗапросе Тогда // Начало запроса.
				МыВЗапросе = Истина;
				ОписаниеТекущегоЗапроса = ТаблицаЗапросов.Добавить();
				ОписаниеТекущегоЗапроса.ПерваяСтрока = ПерваяСтрокаЗапроса;
				СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,ТекстТекущегоЗапроса,"");
			//Иначе // Продолжение запроса
			КонецЕсли;
							
			ТекстТекущегоЗапроса = ТекстТекущегоЗапроса + СтрокаЗапроса;

			ПоследняяСтрокаЗапроса = НомерСтроки;
			
		Иначе
			
			Если МыВЗапросе Тогда // Фиксируем окончание запроса
					
				ОписаниеТекущегоЗапроса.ПоследняяСтрока = ПоследняяСтрокаЗапроса;	
				
				ТекстТекущегоЗапроса = СокрЛП(ТекстТекущегоЗапроса);
				
				Если Прав(ТекстТекущегоЗапроса,1) = ";" Тогда
					ТекстТекущегоЗапроса = Лев(ТекстТекущегоЗапроса,СтрДлина(ТекстТекущегоЗапроса)-1); 
				КонецЕсли;
				Если Прав(ТекстТекущегоЗапроса,1) = """" Тогда
					ТекстТекущегоЗапроса = Лев(ТекстТекущегоЗапроса,СтрДлина(ТекстТекущегоЗапроса)-1); 
				КонецЕсли;
				
				ОписаниеТекущегоЗапроса.Текст = ТекстТекущегоЗапроса;
				
				ВстречалиСловоВыбрать = Ложь; 
				ТекстТекущегоЗапроса = ""; // Обнулим тест запроса

			КонецЕсли;
			
			МыВЗапросе = Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьПроверку(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения.Очистить();
	
	// Инициализируем общие переменные
	МассивСтрокФайлаНРег = Новый Массив;
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
		МассивСтрокФайлаНРег.Добавить(НРег(СтрокаКода));	
	КонецЦикла;
	
	// Поочередно выполняем выбранные пользователем процедуры
	Для Каждого ТекПроверка Из Проверки Цикл
		
		Если Не ТекПроверка.Выбор Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПроцедуры = ТекПроверка.ИмяПроцедуры;
		
		Состояние(СтрШаблон("Выполняется процедура проверки ""%1""",ИмяПроцедуры));
		ОбработкаПрерыванияПользователя();
		
		Выполнить(ИмяПроцедуры+"()");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого ТекСтрока Из Проверки Цикл
		ТекСтрока.Выбор = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	
	Для Каждого ТекСтрока Из Проверки Цикл
		ТекСтрока.Выбор = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтаФорма);
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Путь = ВыбранныеФайлы[0];
	
	ТекстМодуля.НачатьЧтение(Новый ОписаниеОповещения("ЧтениеФайлаЗавершение",ЭтаФорма),Путь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеФайлаЗавершение(Результат) Экспорт
	
	ПриИзмененииТекстаМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборатьИзGitHub(Команда)
	
	Если ПустаяСтрока(АдресМассиваФайловGitHub) Тогда
		АдресМассиваФайловGitHub = ПоместитьВоВременноеХранилище(,УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("АдресМассиваФайловGitHub",АдресМассиваФайловGitHub);
	ОткрытьФорму("ВнешняяОбработка.КонтролерКода.Форма.ПодборИзGitHub",ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборатьИзGitHubЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексМассиваФайловGitHub = Результат;

	ПолучитьСодержимоеФайлаGitHub();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСодержимоеФайлаGitHub(Синхронно = Ложь)
	
	Если Не ЭтоАдресВременногоХранилища(АдресМассиваФайловGitHub) Тогда
		Возврат
	КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресМассиваФайловGitHub);
	
	Если Массив = Неопределено Тогда
		Возврат
	КонецЕсли;

	// Проверим, не вышли ли мы за границу массива перемещаясь командами. 
	// Если вышли - переходим к последнему/первому 
	КоличествоФайлов = Массив.Количество();
	Если ТекущийИндексМассиваФайловGitHub < 0 Тогда
		ТекущийИндексМассиваФайловGitHub = КоличествоФайлов-1;
	ИначеЕсли ТекущийИндексМассиваФайловGitHub >= КоличествоФайлов Тогда 
		ТекущийИндексМассиваФайловGitHub = 0;
	КонецЕсли;
		
	// В массиве должны быть структуры  
	ДанныеФайла = Массив[ТекущийИндексМассиваФайловGitHub]; 
	
	Форма = ПолучитьФорму("ВнешняяОбработка.КонтролерКода.Форма.ПодборИзGitHub");
	
	// Меняем запрос для получения прямой ссылки
	Сервер = "raw.githubusercontent.com";
	ТекстЗапроса = Форма.РазобратьАдресНаИмяСервераИЗапрос(ДанныеФайла.raw_url).Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"/raw","");
	
	ЛокАдрес = ПолучитьИмяВременногоФайла(".txt");

	// Помещаем результат запроса в временный файл
	HTTPОтвет = Форма.ПолучитьHTTPОтвет(Сервер,ТекстЗапроса,ЛокАдрес);
	
	Если Синхронно Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ЛокАдрес);
		Текст = ЧтениеТекста.Прочитать();
		ТекстМодуля.УстановитьТекст(Текст);
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ЛокАдрес);
		
	Иначе
		
		// Оповестим о завержении для удаления временного файла
		Оповещение = Новый ОписаниеОповещения("ПолучитьСодержимоеФайлаGitHubЗавершение",ЭтаФорма,Новый Структура("Адрес",ЛокАдрес));
		
		ТекстМодуля.НачатьЧтение(Оповещение,ЛокАдрес);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСодержимоеФайлаGitHubЗавершение(Результат) Экспорт 
	
	ПриИзмененииТекстаМодуля();

	НачатьУдалениеФайлов(,Результат.Адрес);
			
КонецПроцедуры

&НаКлиенте
Процедура СледующийФайлGitHub(Команда)
	ИзменитьТекущийИндексМассиваФайловGitHub(1);
КонецПроцедуры
&НаКлиенте
Процедура ПредыдущийФайлGitHub(Команда)
	ИзменитьТекущийИндексМассиваФайловGitHub(-1);
КонецПроцедуры
&НаКлиенте
Процедура ИзменитьТекущийИндексМассиваФайловGitHub(Направление)
	
	ТекущийИндексМассиваФайловGitHub = ТекущийИндексМассиваФайловGitHub+Направление;
	ПолучитьСодержимоеФайлаGitHub();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет строку в таблицу сообщений
//
// Параметры:
//  ТекстСообщения	 		- Строка - Краткое описание ошибки
//  НомерСтроки		 		- Число	 - Номер строки с ошибкой
//  НомерПоследнейСтроки 	- Число	 - Номер последней строки с ошибкой (для выделения диапозона строк)
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - Строка табличной части Сообщения
//
&НаКлиенте
Функция ВывестиСообщение(ТекстСообщения,НомерСтроки = 0,НомерПоследнейСтроки = 0) Экспорт

	НовоеСообщение = Сообщения.Добавить();	
	НовоеСообщение.Сообщение 			= ТекстСообщения;
	НовоеСообщение.НомерСтроки			= НомерСтроки;
	НовоеСообщение.НомерПоследнейСтроки = НомерПоследнейСтроки;
	
	Возврат НовоеСообщение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдалитьКомментарии(СтрокаКода) // Не удалил комментарий в строке "если лев(кодпоказателя, 2) = "//" тогда  // пропускаем комментарии"
	
	СтрокаПередКомментарием = "";
	ПроверяемаяСтрока = СтрокаКода;
	ЕстьКомментарийВСтроке = Ложь;
	
	Пока СтрНайти(ПроверяемаяСтрока, "//") > 0 Цикл
		
		ПозицияВозможногоКомментария = СтрНайти(ПроверяемаяСтрока, "//") + 1;
		СтрокаПередВозможнымКомментарием = Лев(ПроверяемаяСтрока, ПозицияВозможногоКомментария);
		
		КоличествоКавычек = 0;
		НомерВхожденияКавычек = 1;
		Пока СтрНайти(СтрокаПередВозможнымКомментарием, """",,,НомерВхожденияКавычек) > 0 Цикл
			НомерВхожденияКавычек = НомерВхожденияКавычек + 1;
			КоличествоКавычек = КоличествоКавычек + 1
		КонецЦикла;
		
		Если Окр((КоличествоКавычек/2) ,0 ,РежимОкругления.Окр15как10) = Окр((КоличествоКавычек/2) ,0 ,РежимОкругления.Окр15как20) Тогда
			
			СтрокаПередКомментарием = СтрокаПередКомментарием + Лев(СтрокаПередВозможнымКомментарием, (ПозицияВозможногоКомментария - 2)); 
			ЕстьКомментарийВСтроке = Истина;  			
			Прервать;
			
		Иначе
			СтрокаПередКомментарием = СтрокаПередКомментарием + СтрокаПередВозможнымКомментарием;
			ДлинаПроверяемойСтроки = СтрДлина(ПроверяемаяСтрока);
			ПроверяемаяСтрока = Прав(ПроверяемаяСтрока, (ДлинаПроверяемойСтроки - ПозицияВозможногоКомментария));
			ЕстьКомментарийВСтроке = Ложь;
			
		КонецЕсли;		
	КонецЦикла;
	
	Если НЕ ЕстьКомментарийВСтроке Тогда
		СтрокаПередКомментарием = СтрокаПередКомментарием + ПроверяемаяСтрока;		
	КонецЕсли;
	
	Возврат СтрокаПередКомментарием;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСтрокуОтКомментария(СтрокаКода)
	
	Если ПустаяСтрока(СтрокаКода) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаКода,"//") = 0 Тогда
		Возврат // Коммантария точно нет.
	КонецЕсли;

	Если СтрНачинаетсяС(СокрЛ(СтрокаКода),"//") Тогда // Вся строка - коммантарий
		СтрокаКода = "";
		Возврат;
	КонецЕсли;
	
	// Разобьем строку на части, их будем анализировать.
	РазбитаяСтрока = СтрЗаменить(СтрокаКода, "//", Символы.ПС);
	СтрокаБезКоммантария = СтрПолучитьСтроку(РазбитаяСтрока,1); // Первая часть точно не комментарий
	
	Для ИндексСтроки = 2 По СтрЧислоСтрок(РазбитаяСтрока) Цикл
		
		Подстрока = СтрПолучитьСтроку(РазбитаяСтрока, ИндексСтроки);
		
		КоличествоКовычекЧетно = СтрЧислоВхождений(СтрокаБезКоммантария,"""")%2=0;
		
		Если Не КоличествоКовычекЧетно Тогда
			СтрокаБезКоммантария = СтрокаБезКоммантария+Подстрока;
			Продолжить;
		Иначе
			// дальше комментарий
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаКода = СтрокаБезКоммантария;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаполненнуюСтроку(Знач НомерСтроки, Направление, НомерЗаполненнойСтроки=0)
	
	СтрокаКода = "";
	
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + Направление;
		СтрокаКода  = ВРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
		СтрокаКода = УдалитьКомментарии(СтрокаКода);
		
		Если ЭтоЗапрос(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;	

		СтрокаКода  = СтрЗаменить(СтрокаКода," ", "");
		
		Если НЕ ПустаяСтрока(СтрокаКода) ИЛИ
			НомерСтроки = ?(Направление>0,ТекстМодуля.КоличествоСтрок(),0) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЗаполненнойСтроки = НомерСтроки;
	
	Возврат СтрокаКода;
	
КонецФункции	

&НаСервере
Функция ПолучитьМакет(Имя)
		
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(Имя);
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяМетода(Знач НомерСтроки)
	
	// Проверка на использование переноса строки
	СтрокаКодаЦеликом = "";
	
	Для НомерСтроки = НомерСтроки По ТекстМодуля.КоличествоСтрок() Цикл	
		
		СтрокаКода = НРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
		ОчиститьСтрокуОтКомментария(СтрокаКода);
		СтрокаКодаЦеликом = СтрокаКодаЦеликом+СтрокаКода;
		
		Если СтрНайти(СтрокаКода,")") <> 0 Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;

	// Имя метода должно быть после первого пробела и перед (
	МассивПодстрок = СтрРазделить(СтрокаКодаЦеликом," (");
	
	Если МассивПодстрок.Количество()>2 Тогда
		Возврат МассивПодстрок[1];
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НайтиЗапросыВДиапозонеСтрок(МассивДиапозонов = Неопределено, Знач ТекущаяСтрока, Знач ПоследняяСтрока) // не имеет смысла, если метод &НаКлиенте
	
	Если МассивДиапозонов = Неопределено Тогда
		МассивДиапозонов = Новый Массив;
	КонецЕсли;
	
	ИсключенияДляПоискаРазименовываний = Новый Массив;
	ИсключенияДляПоискаРазименовываний.Добавить("документы");
	ИсключенияДляПоискаРазименовываний.Добавить("справочники");
	ИсключенияДляПоискаРазименовываний.Добавить("регистрысведений");
	ИсключенияДляПоискаРазименовываний.Добавить("регистрынакопления");
	ИсключенияДляПоискаРазименовываний.Добавить("регистрыбухгалтерии");
	ИсключенияДляПоискаРазименовываний.Добавить("перечисления");
	ИсключенияДляПоискаРазименовываний.Добавить("планысчетов");
	ИсключенияДляПоискаРазименовываний.Добавить("наборзаписей");
	
	ИсключенияДляПоискаРазименовываний.Добавить("табличныйдокумент");
	ИсключенияДляПоискаРазименовываний.Добавить("элементы");
	ИсключенияДляПоискаРазименовываний.Добавить("элемент");
	ИсключенияДляПоискаРазименовываний.Добавить("область");
	ИсключенияДляПоискаРазименовываний.Добавить("форма");
	
	Для ТекущаяСтрока = ТекущаяСтрока По ПоследняяСтрока Цикл	
		
		СтрокаКода = НРег(ТекстМодуля.ПолучитьСтроку(ТекущаяСтрока));
		ОчиститьСтрокуОтКомментария(СтрокаКода);
		
		Если ЭтоТекст(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрокаКода, "предопределенноезначение(")  > 0 Тогда
			Продолжить;	
		КонецЕсли;
	
		// Явные вызовы
		Если СтрНайти(СтрокаКода, "новый запрос") > 0
			Или СтрНайти(СтрокаКода, "запрос.выполнить(") > 0
			Или СтрНайти(СтрокаКода, "новый построительзапроса") > 0
			Или СтрНайти(СтрокаКода, "новый построительотчета")  > 0 
			Или СтрНайти(СтрокаКода, "найтипонатменованию(")  > 0
			Или СтрНайти(СтрокаКода, "найтипокоду(")  > 0
			Или СтрНайти(СтрокаКода, "получитьобъект()")  > 0
			Или СтрНайти(СтрокаКода, "выбрать(")  > 0 Тогда
			МассивДиапозонов.Добавить(Новый Структура("Начало,Конец",ТекущаяСтрока,ТекущаяСтрока));
			Продолжить;
		КонецЕсли;
		
		// Неявные.
		// Поищем разименовывания
		Если СтрНайти(СтрокаКода,".ссылка.") <> 0 Тогда
			МассивДиапозонов.Добавить(Новый Структура("Начало,Конец",ТекущаяСтрока,ТекущаяСтрока));	
			Продолжить;
		КонецЕсли;
		// разобьем строку на части: 1. по пробелам, 2 по скобкам, 3 - точки
		Массив1 = СтрРазделить(СтрокаКода," (),+[]",Ложь);
		Для Каждого Выражение1 Из Массив1 Цикл
			
			Массив2 = СтрРазделить(Выражение1,".",Ложь);
			ДопустипоеКоличествоТочек = 2;
			
			Если Массив2.Количество() <= ДопустипоеКоличествоТочек Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем обращения к областям табличного документа
			Если Массив2[1] = "области" Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем конструкцию ОбменДанными.Загрузка
			Если Массив2[1] = "обменданными"
				И (Массив2.Количество()>2 И Массив2[2] = "загрузка") Тогда
				Продолжить;
			КонецЕсли;
			
			// Удаляем слова-исключения
			Если ИсключенияДляПоискаРазименовываний.Найти(СокрЛ(Массив2[0])) <> Неопределено Тогда
				Массив2.Удалить(0);
			КонецЕсли;
			
			// Проверим, является ли последняя часть методом
			ПоследняяЧасть = Массив2[Массив2.Количество()-1];
			ПозицияВКоде = СтрНайти(СтрокаКода,ПоследняяЧасть,НаправлениеПоиска.СКонца)+СтрДлина(ПоследняяЧасть);
			Если Сред(СтрокаКода,ПозицияВКоде,1) = "(" Тогда
				Массив2.Удалить(Массив2.Количество()-1);		
			КонецЕсли;
			
			Если Массив2.Количество() > ДопустипоеКоличествоТочек Тогда  // Пока очень грубо
				МассивДиапозонов.Добавить(Новый Структура("Начало,Конец",ТекущаяСтрока,ТекущаяСтрока));	
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДиапозонов;
	
КонецФункции
&НаКлиенте
Функция НайтиВызовыСервераВДиапозонеСтрок(МассивДиапозонов = Неопределено, Знач ТекущаяСтрока, Знач ПоследняяСтрока) // не имеет смысла, если метод не на &НаКлиенте
	
	Если МассивДиапозонов = Неопределено Тогда
		МассивДиапозонов = Новый Массив;
	КонецЕсли;
	
	Для ТекущаяСтрока = ТекущаяСтрока По ПоследняяСтрока Цикл	
		
		СтрокаКода = НРег(ТекстМодуля.ПолучитьСтроку(ТекущаяСтрока));
		ОчиститьСтрокуОтКомментария(СтрокаКода);
		
		Если СтрНайти(СтрокаКода,"вызовсервера") > 0 Тогда
			МассивДиапозонов.Добавить(Новый Структура("Начало,Конец",ТекущаяСтрока,ТекущаяСтрока));
			Продолжить;	
		КонецЕсли;
		
		Для Каждого Метод Из СерверныеМетоды Цикл
			Если СтрНайти(СтрокаКода,Метод+"(") > 0 Тогда
				МассивДиапозонов.Добавить(Новый Структура("Начало,Конец",ТекущаяСтрока,ТекущаяСтрока));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДиапозонов;
	
КонецФункции
&НаКлиенте
Функция УбратьКонструкциюФормат(СтрокаКода)
	СтрокаФорматНачало    = Сред(СтрокаКода,Найти(ВРег(СтрокаКода),"ФОРМАТ("));
	СтрокаФорматОкончание = Найти(СтрокаФорматНачало,")");
	
	СтрокаФормат = Лев(СтрокаФорматНачало,СтрокаФорматОкончание);
	МассивСтрок = СтрРазделить(СтрокаФормат, ",", Ложь);
	Если МассивСтрок.Количество()>0 Тогда
		СтрокаМассива = СтрЗаменить(МассивСтрок[0]," ","");
		СтрокаРезультат = СтрЗаменить(ВРег(СтрокаМассива),"ФОРМАТ(","");
	Иначе
		СтрокаРезультат = "";
	КонецЕсли;	
	
	СтрокаКода = СтрЗаменить(СтрокаКода, СтрокаФормат, СтрокаРезультат);
	
	Возврат СтрокаКода;	
	
КонецФункции	

&НаКлиенте
Функция ЭтоДирективаКомпиляции(НомерСтроки, Директива = "")
	
	СтрокаКода	= ТекстМодуля.ПолучитьСтроку(НомерСтроки);
	ОчиститьСтрокуОтКомментария(НРег(СтрокаКода));
	СтрокаКода  = СокрЛП(СтрокаКода);
	
	//РасширенияОбработчиков = Новый Массив;
	//РасширенияОбработчиков.Добавить("&Перед");
	//РасширенияОбработчиков.Добавить("&Вместо");
	//РасширенияОбработчиков.Добавить("&После");
	
	Если СтрНачинаетсяС(СтрокаКода,"&НаКлиенте") 
		Или СтрНачинаетсяС(СтрокаКода,"&НаСервере") Тогда	
		Директива = СтрЗаменить(СтрокаКода,"&","");
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции	
&НаКлиенте
Функция ЭтоОбласть(НомерСтроки)
	
	СтрокаКода	= ТекстМодуля.ПолучитьСтроку(НомерСтроки);
	ОчиститьСтрокуОтКомментария(НРег(СтрокаКода));
	СтрокаКода  = СокрЛП(СтрокаКода);
	
	Возврат СтрНачинаетсяС(СтрокаКода,"#");
	
КонецФункции
&НаКлиенте
Функция ЭтоНачалоКонецОператорныхСкобок(Знач НомерСтроки, ОписаниеСкобок, КомандаПолностью = "");
	
	Если ЭтоДирективаКомпиляции(НомерСтроки) 
		Или ЭтоОбласть(НомерСтроки) Тогда
		Возврат Ложь
	КонецЕсли;
	
	СтрокаКода	= ТекстМодуля.ПолучитьСтроку(НомерСтроки);
	ОчиститьСтрокуОтКомментария(СтрокаКода);
	СтрокаКода  = НРег(СтрокаКода);
	СтрокаКода  = СтрЗаменить(СтрокаКода,"экспорт","");
	СтрокаКода  = СокрЛП(СтрокаКода);

	КомандаПолностью = КомандаПолностью + СтрокаКода; // Переменная необходима для накапливания в случае, если использовался перенос строк.
	
	// Подберем описание, подходящее по условию начала строки.
	Для Каждого Описание Из ОписаниеОператорныхСкобок Цикл
		
		// Если не разу не встретим начало - вернем ложь.
		Если Не СтрНачинаетсяС(КомандаПолностью,Описание.НачинаетсяС) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начало совпадает. Нужно проверить, что и заканчивается соответственно.
		
		// Условие-признак конца команды. Если выпоняется - это не операторная скобка
		СтрокаБезТочкиСЗапятой = СтрЗаменить(СтрокаКода,";","");
		Если СтрЗаканчиваетсяНа(СтрокаКода,";")
			И Не СтрЗаканчиваетсяНа(СтрокаБезТочкиСЗапятой, Описание.ЗаканчиваетсяНа) Тогда // Операторы могут (или нет) заканчиваться на ; в разных ситуациях
			Возврат Ложь; // Это конец команды
		КонецЕсли;

		Если СтрЗаканчиваетсяНа(СтрокаБезТочкиСЗапятой,Описание.ЗаканчиваетсяНа) Тогда
			ОписаниеСкобок = Описание;
			Возврат Истина;	
		КонецЕсли;
		
		// Не встретили ни ; не конец операторных скобок, значит использовался перенос строк, продолжаем поиск рекурсивно.
		Если НомерСтроки <> ТекстМодуля.КоличествоСтрок() Тогда
			Возврат ЭтоНачалоКонецОператорныхСкобок(НомерСтроки+1,ОписаниеСкобок,КомандаПолностью);
		Иначе
			Возврат Ложь; // Конец модуля
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	
&НаКлиенте
Функция ЭтаВеткаДереваВЦикле(ВеткаДерева)
	
	Родитель = ВеткаДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Родитель.Секция = "Цикл" Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат ЭтаВеткаДереваВЦикле(Родитель);
	
КонецФункции

&НаКлиенте
Функция ЭтоТекст(Знач СтрокаКода)
	
	СтрокаКода = СокрЛ(СтрокаКода);
	
	Возврат СтрНачинаетсяС(СтрокаКода, """") Или СтрНачинаетсяС(СтрокаКода, "|");
		
КонецФункции
&НаКлиенте
Функция ЭтоЗапрос(СтрокаКода)
	
	Если СтрНайти(СтрокаКода, "|") > 0 Тогда
		ПозицияЗапроса = СтрНайти(СтрокаКода, "|");
		КодПередЗапросом = СокрЛП(Лев(СтрокаКода, (ПозицияЗапроса - 1)));
		Если КодПередЗапросом = "" Тогда		
			Возврат Истина;    			
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область АвтоматическоеТестирование

&НаКлиенте
Процедура ВыполнитьПроверкуПоСценарию() Экспорт
	
	// Получим каталог обработки для записи результата
	МассивПути 			= СтрРазделить(Объект.АдресВнешнейОбработки,"\");
	ИмяОбработки 		= МассивПути[МассивПути.Количество()-1];
	Каталог 			= СтрЗаменить(Объект.АдресВнешнейОбработки,ИмяОбработки,"");
	ИмяФайлаРезультат 	= "Результат тестирования.txt";
	
	// Удалим предыдущий результат тестирования
	УдалитьФайлы(Каталог+ИмяФайлаРезультат);
	
	// Выбирем только проверки, не требующие анализа специалиста и актуальные в любой базе.
	ТребуемыеПроверки = Проверки.НайтиСтроки(Новый Структура("ТребуетсяАнализ,РаботаИзЛюбойБазы",Ложь,Истина));
	Для Каждого ТекПроверка Из ТребуемыеПроверки Цикл
		ТекПроверка.Выбор = Истина;
	КонецЦикла;
		
	Если СтрНачинаетсяС(ПараметрЗапуска,"https://github.com/") Тогда
		ВыполнитьПроверкуКоммита(ПараметрЗапуска);	
	Иначе
		
		КаталогНаДиске = Новый Файл(ПараметрЗапуска);
		
		Если Не КаталогНаДиске.Существует() Тогда
			ВызватьИсключение СтрШаблон("В качестве параметра запуска нужно указать существующий и доступный каталог или URL-адрес коммита GitHub. Текущий параметр: %1",
			ПараметрЗапуска);
		КонецЕсли;
		
		Файлы = НайтиФайлы(ПараметрЗапуска,"*.*",Истина);
		
		Для Каждого ТекФайл Из Файлы Цикл
			
			ЧтениеТекста = Новый ЧтениеТекста(ТекФайл);
			Текст = ЧтениеТекста.Прочитать();
			ТекстМодуля.УстановитьТекст(Текст);
			ПриИзмененииТекстаМодуля();
			ВыполнитьПроверку(Команды.ВыполнитьПроверку);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Сообщения.Количество() > 0 Тогда
		
		ЗаписьТекста = Новый ЗаписьТекста(Каталог+ИмяФайлаРезультат,КодировкаТекста.ANSI);
		ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("Результат тестирования %1",ПараметрЗапуска));
		
		Для Каждого Сообщение Из Сообщения Цикл	
			ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("%1,%2 %3",Сообщение.НомерСтроки,Сообщение.НомерПоследнейСтроки,Сообщение.Сообщение));	
		КонецЦикла;
		
		ЗаписьТекста.Закрыть();

	КонецЕсли;

	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуКоммита(АдресКоммита) Экспорт
	
	АдресМассиваФайловGitHub = ПоместитьВоВременноеХранилище(,УникальныйИдентификатор);
		
	ПараметрыФормы = Новый Структура("АдресМассиваФайловGitHub,АдресКоммита",АдресМассиваФайловGitHub,АдресКоммита);
	ОткрытьФорму("ВнешняяОбработка.КонтролерКода.Форма.ПодборИзGitHub",ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроверитьФайлыИзКоммитаGitHub() Экспорт
		
	Массив = ПолучитьИзВременногоХранилища(АдресМассиваФайловGitHub);
	
	Если Массив = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неправильный адрес коммита или он не содержит измененных файлов");
	КонецЕсли;
	
	Для ТекущийИндексМассиваФайловGitHub = 0 По Массив.Количество()-1 Цикл
		
		ПолучитьСодержимоеФайлаGitHub(Истина);
		ПриИзмененииТекстаМодуля();
		ВыполнитьПроверку(Команды.ВыполнитьПроверку);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыПроверки

&НаКлиенте
Процедура КонтрольНаличияКонструкцииСсылкаСсылка() Экспорт
	
	//Контроль наличия конструкции Ссылка.Ссылка
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если СтрНайти(СтрокаКодаБезКомментариев, "ссылка.ссылка") > 0 Тогда
			
			ВывестиСообщение("Используется конструкция Ссылка.Ссылка",НомерСтроки);

		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияРазыменования() Экспорт
	
	//Контроль наличия разыменования

	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если Не ЭтоЗапрос(СтрокаКодаБезКомментариев) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(СтрокаКодаБезКомментариев,"регистрсведений.") ИЛИ
			 Найти(СтрокаКодаБезКомментариев,"регистрнакопления.") ИЛИ
			 Найти(СтрокаКодаБезКомментариев,"регистррасчета.") ИЛИ
			 Найти(СтрокаКодаБезКомментариев,"регистрбухгалтерии.") ИЛИ
			 Найти(СтрокаКодаБезКомментариев,"бизнеспроцесс.") Тогда
			  Продолжить;
		КонецЕсли; 

		МассивСтрок = СтрРазделить(СтрокаКодаБезКомментариев, " ", Ложь);
		
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			Если СтрЧислоВхождений(СтрокаМассива,".")>1 Тогда
				ВывестиСообщение("Используется разыменование",НомерСтроки);
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;

	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияУсловияНеРавно() Экспорт
	
	//Контроль наличия условия Не равно
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если Не ЭтоЗапрос(СтрокаКодаБезКомментариев) Тогда
			Продолжить;
		КонецЕсли;
		
		//Контроль наличия условия Не равно
		Если СтрНайти(СтрокаКодаБезКомментариев, "<>") > 0 Тогда
			ВывестиСообщение("Используется условие НЕ Равно",НомерСтроки);;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияУсловияИЛИ() Экспорт
	
	//Контроль наличия условия Или
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если Не ЭтоЗапрос(СтрокаКодаБезКомментариев) Тогда
			Продолжить;
		КонецЕсли;
		
		//Контроль наличия условия Или
		Если СтрНайти(СтрокаКодаБезКомментариев, " или ") > 0 Тогда
			ВывестиСообщение("Используется условие ИЛИ",НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияУсловияОбъединить() Экспорт
	
	//Контроль наличия условия Объединить
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если Не ЭтоЗапрос(СтрокаКодаБезКомментариев) Тогда
			Продолжить;
		КонецЕсли;
		
		//Контроль наличия конструкции Объединить
		Если (СтрНайти(СтрокаКодаБезКомментариев, " объединить") > 0) Или (СтрНайти(СтрокаКодаБезКомментариев, "|объединить") > 0) Тогда
			
			ПозицияОбъединить = СтрНайти(СтрокаКодаБезКомментариев, "объединить") + 10;
			
			Если (Сред(СтрокаКодаБезКомментариев, ПозицияОбъединить, 1) = " ") Тогда   
				
				Если СтрНайти(СтрокаКодаБезКомментариев, " все", , ПозицияОбъединить) = 0 Тогда  					
					ОшибокНеВыявлено = Ложь;
					ВывестиСообщение("Используется условие условие Объединить без Объединить все",НомерСтроки);
				Иначе
					ПозицияВсё = СтрНайти(СтрокаКодаБезКомментариев, " все", , ПозицияОбъединить) - 1;
					
					Для сч = ПозицияОбъединить По ПозицияВсё Цикл
						Если Сред(СтрокаКодаБезКомментариев, сч, 1) <> " " Тогда
							ОшибокНеВыявлено = Ложь;
							ВывестиСообщение("Используется условие условие Объединить без Объединить все",НомерСтроки);
							Прервать;	
						КонецЕсли;				
					КонецЦикла;	
					
					Если НЕ ((Сред(СтрокаКодаБезКомментариев, (ПозицияВсё + 5)) = " ") Или (КодСимвола(Сред(СтрокаКодаБезКомментариев, (ПозицияВсё + 5))) = 32)) Тогда
						ОшибокНеВыявлено = Ложь;
						ВывестиСообщение("Используется условие условие Объединить без Объединить все",НомерСтроки);					
					КонецЕсли;
					
				КонецЕсли; 	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольМусорныхКомментариев15КомментариевПодряд() Экспорт
	
	КомментариевПодряд = 0;
	ПустыхСтрок = 0;
		
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;
		
		СтрокаКодаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		СтрокаБезПробелов = СокрЛП(СтрокаКодаБезКомментариев);
		
		Если (СтрНайти(СтрокаКода, "//") > 0 И СтрокаБезПробелов = "") Тогда
			КомментариевПодряд = КомментариевПодряд + 1;
		ИначеЕсли (СтрНайти(СтрокаКода, "//") = 0 И СтрокаБезПробелов = "") И КомментариевПодряд > 0 Тогда
			ПустыхСтрок = ПустыхСтрок + 1;			 
		ИначеЕсли СтрокаБезПробелов <> "" Тогда
			
			Если КомментариевПодряд >= 15 Тогда
				СтрокаНачала = НомерСтроки - ПустыхСтрок - КомментариевПодряд;
				ВывестиСообщение(СтрШаблон("Строки %1 - %2 содержат мусорные комментариии",СтрокаНачала,НомерСтроки-1),СтрокаНачала,НомерСтроки-1);
			КонецЕсли;		 
			
			КомментариевПодряд = 0;		
			ПустыхСтрок = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПустыхПроцедурИФункций() Экспорт
	
	ЭтоПроцедураФункция = Ложь;
	НетПустыхСтрок = Ложь; 
		
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;

		СтрокаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		
		Если (СтрНайти(СтрокаБезКомментариев, "процедура ") > 0) Или СтрНайти(СтрокаБезКомментариев, "функция ") > 0 Тогда
			
			ПозицияПроцедуры = СтрНайти(СтрокаБезКомментариев, "процедура ");
			ПозицияФункции = СтрНайти(СтрокаБезКомментариев, "функция ");
			
			Если ПозицияПроцедуры > ПозицияФункции Тогда
				ПозицияПроцедурыФункции = ПозицияПроцедуры;
			Иначе
				ПозицияПроцедурыФункции = ПозицияФункции;
			КонецЕсли;			
			
			Если ПозицияПроцедурыФункции > 1 Тогда
				КодПередПроцедурой = Лев(СтрокаБезКомментариев, (ПозицияПроцедурыФункции - 1));
				КодПередПроцедурой = СокрЛП(КодПередПроцедурой);
				Если КодПередПроцедурой = "" Тогда
					ЭтоПроцедураФункция = Истина; 
					НомерСтрокиПроцедурыФункции = НомерСтроки;
					ПерваяСтрокаПроцедурыФункции = СтрокаКода;
				КонецЕсли;
			Иначе
				ЭтоПроцедураФункция = Истина; 
				НомерСтрокиПроцедурыФункции = НомерСтроки;
				ПерваяСтрокаПроцедурыФункции = СтрокаКода;      
			КонецЕсли; 
		КонецЕсли;
		
		Если ЭтоПроцедураФункция Тогда
			
			СтрокаБезПробелов = СокрЛП(СтрокаБезКомментариев);  				
			
			Если СтрокаБезПробелов = "конецфункции" Или СтрокаБезПробелов = "конецпроцедуры" Тогда
				
				Если НЕ НетПустыхСтрок Тогда
										 
					ВывестиСообщение(СтрШаблон("Строки %1 - %2 содержат пустую процедуру или функцию",НомерСтрокиПроцедурыФункции,НомерСтроки),НомерСтрокиПроцедурыФункции,НомерСтроки);

				КонецЕсли;
				
				ЭтоПроцедураФункция = Ложь;
				НетПустыхСтрок = Ложь;   						
				
			ИначеЕсли (СтрокаБезПробелов <> "") И (НомерСтрокиПроцедурыФункции < НомерСтроки) Тогда
				НетПустыхСтрок = Истина;						
			КонецЕсли;                       					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПолностьюЗакомментированныхПроцедурИФункций() Экспорт
	
	ЭтоПроцедураФункция = Ложь; 
		
	НомерСтроки = 0;
	
	Для Каждого СтрокаКода Из МассивСтрокФайлаНРег Цикл
		
		НомерСтроки = НомерСтроки+1;

		СтрокаБезКомментариев = УдалитьКомментарии(СтрокаКода);
		ДлинаТекста = СтрДлина(СтрокаКода) - СтрДлина(СтрокаБезКомментариев) - 2;
		Комментарий = Прав(СтрокаКода, ДлинаТекста);
		
		Если СтрНайти(Комментарий, "процедура ") > 0 Или СтрНайти(Комментарий, "функция ") > 0 Тогда
			ЭтоПроцедураФункция = Истина;
			НомерСтрокиПроцедурыФункции = НомерСтроки;
			ПерваяСтрокаПроцедурыФункции = СтрокаКода;
		КонецЕсли; 			
		
		Если ЭтоПроцедураФункция Тогда
			
			Если СокрЛП(СтрокаБезКомментариев) <> "" Тогда
				ЭтоПроцедураФункция =Ложь;
			ИначеЕсли (СтрНайти(Комментарий, "конецпроцедуры") > 0) Или (СтрНайти(Комментарий, "конецфункции") > 0) Тогда   				
				
				ЭтоПроцедураФункция = Ложь;
				ВывестиСообщение(СтрШаблон("Строки %1 - %2 содержат закомментированную процедуру или функцию",НомерСтрокиПроцедурыФункции,НомерСтроки),НомерСтрокиПроцедурыФункции,НомерСтроки);

			КонецЕсли;                                       		  
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияПолноеСоединение() Экспорт
	
	ТекстПолноеВнешнееСоединение = "ПОЛНОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ";
	ТекстПолноеСоединение = "ПОЛНОЕ СОЕДИНЕНИЕ";
	
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
		СтрокаКодаВРег = Врег(СтрокаКода);
		
		Если (СтрНайти(СтрокаКодаВРег, ТекстПолноеВнешнееСоединение) > 0) ИЛИ
			(СтрНайти(СтрокаКодаВРег, ТекстПолноеСоединение) > 0) Тогда
			
			ОшибокНеВыявлено = Ложь;
			ВывестиСообщение("Используется ""ПОЛНОЕ СОЕДИНЕНИЕ", НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияНесколькихОператоровВСтроке()
	
	//Наличие нескольких операторов допускается только для "однотипных" операторов присваивания, например: А = 0; Б = 0; С = 0;
	
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
		СтрокаКода = УдалитьКомментарии(СтрокаКода);
		
		Если Найти(ВРег(СтрокаКода),"ФОРМАТ(") Тогда
			СтрокаКода = УбратьКонструкциюФормат(СтрокаКода);
		КонецЕсли;	
		
		Если СтрЧислоВхождений(СтрокаКода,"=") > 1 и СтрЧислоВхождений(СтрокаКода,";") > 1 Тогда
			
			МассивОдинаковыхЗначений = Новый Массив;
			
			МассивСтрок = СтрРазделить(СтрокаКода, ";", Ложь);
			Для Каждого СтрокаМассива из МассивСтрок Цикл
				ПозицияРавно = Найти(СтрокаМассива,"="); 
				Если ПозицияРавно>0 Тогда	
					ЗначениеОператора = Сред(СтрокаМассива,ПозицияРавно+1);
					ЗначениеОператора = СокрЛП(ЗначениеОператора);
					Если МассивОдинаковыхЗначений.Найти(ЗначениеОператора)=Неопределено Тогда
						МассивОдинаковыхЗначений.Добавить(ЗначениеОператора);
					КонецЕСли;
				КонецЕсли;	
			КонецЦикла;	
				
			Если МассивОдинаковыхЗначений.Количество()>1 Тогда
				ОшибокНеВыявлено = Ложь;
				ВывестиСообщение("Наличие нескольких операторов в строке", НомерСтроки);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КонтрольНаличияПовторяющегосяКодаНаСервере()
	
	МассивРезультата = Новый Массив; //Возвращает результат пользователю
	МассивМодуляСПустымиСтроками = Новый Массив;
	
	ПроверочнаяТаблица = Новый ТаблицаЗначений;
	ПроверочнаяТаблица.Колонки.Добавить("ТекстМодуля");
	ПроверочнаяТаблица.Колонки.Добавить("КоличествоСтрок");
	ПроверочнаяТаблица.Колонки.Добавить("КоличествоПовторов");  //Используется для суммирования при свертке таблицы
	ПроверочнаяТаблица.Колонки.Добавить("НомерНачальнойСтроки");//Используется для определения начального интервала модуля
	ПроверочнаяТаблица.Колонки.Добавить("НомерКонечнойСтроки"); //Используется для определения конечного интервала модуля
	
	//Заполним массив с пробелами для определения номеров строк
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ВРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
		СтрокаКода = УдалитьКомментарии(СтрокаКода);
		СтрокаКода = СтрЗаменить(СтрокаКода," ","");
		СтрокаКода = СтрЗаменить(СтрокаКода,Символы.Таб,"");	
		
		МассивМодуляСПустымиСтроками.Добавить(СтрокаКода);
		
	КонецЦикла;
	
	//Получим текст модуля без пустых строк для сравнения
	ТекстМодуляБезПустыхСтрок = "";
	Для Каждого СтрокаМассива из МассивМодуляСПустымиСтроками Цикл
		Если ПустаяСтрока(СтрокаМассива) Тогда	
			Продолжить;
		КонецЕсли;	
		ТекстМодуляБезПустыхСтрок = ТекстМодуляБезПустыхСтрок + СтрокаМассива + Символы.ПС; 
	КонецЦикла;	
	
	КоличествоСтрок = МассивМодуляСПустымиСтроками.Количество();
	
	//НачалоВыполнения = ТекущаяДатаСеанса();
	Для НомерНачальнойСтроки = 1 по КоличествоСтрок Цикл
		НомерСтроки = 0;
		КоличествоЗаполненныхСтрок = 0;
		КоличествоПустыхСтрок      = 0;
		ПроверочныйТекстМодуля     = "";
		
		Для НомерСтроки = НомерНачальнойСтроки по КоличествоСтрок Цикл
			ИндексСтроки = НомерСтроки-1;
			СтрокаКода   = МассивМодуляСПустымиСтроками[ИндексСтроки]; 
			Если ПустаяСтрока(СтрокаКода) Тогда
				Если КоличествоЗаполненныхСтрок>0 Тогда
					КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ПроверочныйТекстМодуля = ПроверочныйТекстМодуля + СтрокаКода + Символы.ПС;
			КоличествоЗаполненныхСтрок = КоличествоЗаполненныхСтрок + 1;
			
			Если КоличествоЗаполненныхСтрок < 3 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(ТекстМодуляБезПустыхСтрок, ПроверочныйТекстМодуля) > 1 Тогда
				НС = ПроверочнаяТаблица.Добавить();
				НС.ТекстМодуля          = ПроверочныйТекстМодуля;
				НС.КоличествоСтрок      = КоличествоЗаполненныхСтрок;
				НС.НомерНачальнойСтроки = НомерСтроки - (КоличествоЗаполненныхСтрок + КоличествоПустыхСтрок)+1;
				НС.НомерКонечнойСтроки  = НомерСтроки;
				НС.КоличествоПовторов   = 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	//Длительность = ""+Окр((ТекущаяДатаСеанса()-НачалоВыполнения)/60)+"мин.";
	//Сообщить("Длительность основного цикла:"+Длительность);

	СвернутаяТаблица = ПроверочнаяТаблица.Скопировать();
	СвернутаяТаблица.Свернуть("ТекстМодуля, КоличествоСтрок","КоличествоПовторов");
	СвернутаяТаблица.Сортировать("КоличествоПовторов Убыв, КоличествоСтрок Убыв");

	Для Каждого СтрокаТаблицы из СвернутаяТаблица Цикл
		//Вернем максимальный по количеству совпадающих строк модуль
		Если СтрокаТаблицы.КоличествоПовторов > 1 Тогда
			//Найдем начальную и конечную строки
			НайденаСтрока = ПроверочнаяТаблица.Найти(СтрокаТаблицы.ТекстМодуля, "ТекстМодуля");
			Если НайденаСтрока <> Неопределено Тогда
				НомерСтрокиНачало = НайденаСтрока.НомерНачальнойСтроки; 
				НомерСтрокиКонец  = НайденаСтрока.НомерКонечнойСтроки;
			Иначе
				НомерСтрокиНачало = 1; 
				НомерСтрокиКонец  = 1; 
			КонецЕсли;	
			
			ТекстСообщения = СтрШаблон("Используется повторяющийся код (Кол.повторов=""%1""; кол.строк=""%2""):%3",
							 НайденаСтрока.КоличествоПовторов,НайденаСтрока.КоличествоСтрок,Символы.ПС+СтрокаТаблицы.ТекстМодуля);
							 
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("ТекстСообщения", ТекстСообщения);
			СтруктураРезультата.Вставить("НачальныйНомерСтроки", НомерСтрокиНачало);
			СтруктураРезультата.Вставить("КонечныйНомерСтроки",  НомерСтрокиКонец);
			
			МассивРезультата.Добавить(СтруктураРезультата);
			
			Прервать;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивРезультата;
	
КонецФункции

&НаКлиенте
Процедура КонтрольНаличияПовторяющегосяКода()

	РезультатПроверки = КонтрольНаличияПовторяющегосяКодаНаСервере();	
	
	Для Каждого СтрокаРезультата из РезультатПроверки Цикл
		ОшибокНеВыявлено = Ложь;
		ВывестиСообщение(СтрокаРезультата.ТекстСообщения, СтрокаРезультата.НачальныйНомерСтроки, СтрокаРезультата.КонечныйНомерСтроки);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияВиртуальныхТаблицБезПараметров()
	
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ВРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
		СтрокаКода = УдалитьКомментарии(СтрокаКода);

		Если Не ЭтоЗапрос(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(СтрокаКода,"РЕГИСТР") И СтрЧислоВхождений(СтрокаКода, ".")>1 Тогда
			
			ОшибкаВиртуальныхТаблиц = Ложь;
			ПозицияПервойСкобки = Найти(СтрокаКода,"(");
			НачальнаяСтрока = НомерСтроки; 
			
			Если ПозицияПервойСкобки>0 Тогда
				ПозицияВторойСкобки = Найти(СтрокаКода,")");
				ДлинаПараметров = 0; 
				Если ПозицияВторойСкобки = 0 Тогда
					НомерСтроки = НомерСтроки + 1;
					Для НомерСтроки = НомерСтроки По ТекстМодуля.КоличествоСтрок() Цикл
						
						СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
						СтрокаКода = УдалитьКомментарии(СтрокаКода);
						
						Если Не ЭтоЗапрос(СтрокаКода) Тогда
							Продолжить;
						КонецЕсли;
						
						ПозицияВторойСкобки = Найти(СтрокаКода,")");
						Если ПозицияВторойСкобки > 0 Тогда
							ПараметрыВиртуальнойТаблицы = Лев(СтрокаКода,ПозицияВторойСкобки-1);
						Иначе
							ПараметрыВиртуальнойТаблицы = СтрокаКода;
						КонецЕсли;	
						
						ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы,"|","");
						ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы,",","");
						ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы," ","");
						ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы,"	","");
						
						ДлинаПараметров = ДлинаПараметров + СтрДлина(ПараметрыВиртуальнойТаблицы);
						
						Если ПозицияВторойСкобки > 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;	
					
				Иначе	
					ПараметрыВиртуальнойТаблицы = Сред(СтрокаКода,ПозицияПервойСкобки+1,ПозицияВторойСкобки-ПозицияПервойСкобки-1);
					ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы,",","");
					ПараметрыВиртуальнойТаблицы = СтрЗаменить(ПараметрыВиртуальнойТаблицы," ","");
					ДлинаПараметров = СтрДлина(ПараметрыВиртуальнойТаблицы);
				КонецЕсли;
				
				Если СтрДлина(ПараметрыВиртуальнойТаблицы)=0 Тогда
					ОшибкаВиртуальныхТаблиц = Истина;
				КонецЕсли;	
				
			Иначе
				ОшибкаВиртуальныхТаблиц = Истина;
			КонецЕсли;	
			
			Если ОшибкаВиртуальныхТаблиц Тогда
				ОшибокНеВыявлено = Ложь;
				ВывестиСообщение("Используются виртуальные таблицы без параметров", НачальнаяСтрока, НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияВложенныхЗапросов()

	//Допускается использование вложенных запросов к временным таблицам
	
	Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
		
		СтрокаКода = ВРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
		СтрокаКода = УдалитьКомментарии(СтрокаКода);
		
		Если Не ЭтоЗапрос(СтрокаКода) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКода = СтрЗаменить(СтрокаКода," ", "");
		Если Найти(СтрокаКода, "(ВЫБРАТЬ") Тогда
			НачальнаяСтрока = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			Для НомерСтроки = НомерСтроки По ТекстМодуля.КоличествоСтрок() Цикл
				
				СтрокаКода = ВРег(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
				СтрокаКода = УдалитьКомментарии(СтрокаКода);
				
				Если Не ЭтоЗапрос(СтрокаКода) Тогда
					Прервать;
				КонецЕсли;
				
				Если Найти(СтрокаКода, "	ИЗ") ИЛИ Найти(СтрокаКода, "ИЗ") Тогда
					Если Найти(СтрокаКода, ")")=0 Тогда
						НомерСтроки = НомерСтроки+1;
						
						СтрокаКода = ТекстМодуля.ПолучитьСтроку(НомерСтроки);
						СтрокаКода = УдалитьКомментарии(СтрокаКода);
						
					КонецЕсли;
					
					Если Найти(СтрокаКода, ".") Тогда
						
						ОшибокНеВыявлено = Ложь;
						ВывестиСообщение("Используются вложенные запросы", НачальнаяСтрока, НомерСтроки);
						
					КонецЕсли;	
					
					Прервать;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаПревышениеВложенности(ЭлементДерева = Неопределено,УровеньВложенности = 0) Экспорт
	
	УровеньВложенности = УровеньВложенности+1;

	Если ЭлементДерева = Неопределено Тогда
		ЭлементДерева = СтруктураМодуля;
	КонецЕсли;
	
	Если УровеньВложенности > ПредельныйУровеньВложенности Тогда
		
		ВывестиСообщение(СтрШаблон("Превышен допустимый уровень вложенности (%1)", ПредельныйУровеньВложенности),
			ЭлементДерева.ПерваяСтрока,
			ЭлементДерева.ПоследняяСтрока);
		
	Иначе
		
		// Продолжаем рекурсивно.
		Для Каждого ТекСтрока Из ЭлементДерева.ПолучитьЭлементы() Цикл
			КонтрольНаПревышениеВложенности(ТекСтрока,УровеньВложенности);
		КонецЦикла;
		
	КонецЕсли;

	УровеньВложенности = УровеньВложенности-1;

КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияКонструкцииОбработкиИсключения(ЭлементДерева = Неопределено) Экспорт
	
	Если ЭлементДерева = Неопределено Тогда
		ЭлементДерева = СтруктураМодуля;
	КонецЕсли;
			
	Для Каждого ТекСтрока Из ЭлементДерева.ПолучитьЭлементы() Цикл
		
		Если ТекСтрока.Секция = "ОбработкаИсключения" Тогда
			ВывестиСообщение("Конструкция обработки исключений",
				ТекСтрока.ПерваяСтрока,
				ТекСтрока.ПоследняяСтрока);
			Продолжить;
		КонецЕсли;

		// Продолжаем рекурсивно.
		КонтрольНаличияКонструкцииОбработкиИсключения(ТекСтрока);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияЗапросовВЦикле(ЭлементДерева = Неопределено, ТекущийУровень = 0) Экспорт
	
	Если ТекущийУровень = 0 Тогда
		ЭлементДерева = СтруктураМодуля;
	КонецЕсли;
	
	СтрокиДерева = ЭлементДерева.ПолучитьЭлементы();
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для НомерВетки = 1 По КоличествоСтрок Цикл
		
		ТекСтрока = СтрокиДерева[НомерВетки-1];
		
		Если ТекСтрока.Директива = "НаКлиенте" Тогда 
			Продолжить; // На клиенте нельзя выполнять запросы
		КонецЕсли;
		
		МассивОшибок = Новый Массив;

		ПодчиненныеСтроки = ТекСтрока.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			
			Если ЭтаВеткаДереваВЦикле(ТекСтрока) Тогда 
				// Проверим строки до начала вложенных скобок и после
				НачатьС 	= ТекСтрока.ПерваяСтрока+1;
				Закончить 	= ПодчиненныеСтроки[0].ПерваяСтрока;
				НайтиЗапросыВДиапозонеСтрок(МассивОшибок,НачатьС,Закончить);
				
				НачатьС 	= ПодчиненныеСтроки[ПодчиненныеСтроки.Количество()-1].ПоследняяСтрока;
				Закончить 	= ТекСтрока.ПоследняяСтрока;
				НайтиЗапросыВДиапозонеСтрок(МассивОшибок,НачатьС,Закончить);		
			КонецЕсли;
					
			// Продолжаем рекурсивно.
			КонтрольНаличияЗапросовВЦикле(ТекСтрока,ТекущийУровень+1);	
						
		Иначе 
			
			Если ТекущийУровень = 0 Тогда
				Продолжить; // Мы в корне метода
			КонецЕсли;
			
			Если ТекСтрока.Секция = "Цикл" Тогда
				
				НайтиЗапросыВДиапозонеСтрок(МассивОшибок,ТекСтрока.ПерваяСтрока+1,ТекСтрока.ПоследняяСтрока);
				
			ИначеЕсли ЭтаВеткаДереваВЦикле(ТекСтрока) Тогда
				
				// Проверяем со второй строки этой ветки до первой следующей.
				// Если эта ветка последняя - то до конца её.
				Если НомерВетки = КоличествоСтрок Тогда
					ПоследняяСтрока = ТекСтрока.ПоследняяСтрока;	
				Иначе
					ПоследняяСтрока = СтрокиДерева[НомерВетки].ПерваяСтрока;
				КонецЕсли;
				
				НайтиЗапросыВДиапозонеСтрок(МассивОшибок,ТекСтрока.ПерваяСтрока+1,ПоследняяСтрока);

			КонецЕсли;
			
		КонецЕсли; 
		
		Для Каждого Ошибка Из МассивОшибок Цикл
			ВывестиСообщение("Запрос в цикле",
				Ошибка.Начало,
				Ошибка.Конец);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияВызововСервераВЦикле(ЭлементДерева = Неопределено, ТекущийУровень = 0) Экспорт
	
	Если ТекущийУровень = 0 Тогда
		ЭлементДерева = СтруктураМодуля;
	КонецЕсли;
			
	СтрокиДерева = ЭлементДерева.ПолучитьЭлементы();
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для НомерВетки = 1 По КоличествоСтрок Цикл
		
		ТекСтрока = СтрокиДерева[НомерВетки-1];
		
		Если ТекущийУровень = 0
			И Не СтрНачинаетсяС(ТекСтрока.Директива,"НаКлиенте") Тогда // НаКлиентеНаСервереБезКонтекста
			Продолжить; // На актуально только для клиентских методов
		КонецЕсли;
		
		МассивОшибок = Новый Массив;
		
		ПодчиненныеСтроки = ТекСтрока.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			
			Если ЭтаВеткаДереваВЦикле(ТекСтрока) Тогда 
				// Проверим строки до начала вложенных скобок и после
				НачатьС 	= ТекСтрока.ПерваяСтрока+1;
				Закончить 	= ПодчиненныеСтроки[0].ПерваяСтрока;
				НайтиВызовыСервераВДиапозонеСтрок(МассивОшибок,НачатьС,Закончить);
				
				НачатьС 	= ПодчиненныеСтроки[ПодчиненныеСтроки.Количество()-1].ПоследняяСтрока;
				Закончить 	= ТекСтрока.ПоследняяСтрока;
				НайтиВызовыСервераВДиапозонеСтрок(МассивОшибок,НачатьС,Закончить);		
			КонецЕсли;
			
			// Продолжаем рекурсивно.
			КонтрольНаличияВызововСервераВЦикле(ТекСтрока,ТекущийУровень+1);	
			
		Иначе 			
			
			Если ТекущийУровень = 0 Тогда
				Продолжить; // Мы в корне метода
			КонецЕсли;
			
			Если ТекСтрока.Секция = "Цикл" Тогда
				
				НайтиВызовыСервераВДиапозонеСтрок(МассивОшибок,ТекСтрока.ПерваяСтрока+1,ТекСтрока.ПоследняяСтрока);
				
			ИначеЕсли ЭтаВеткаДереваВЦикле(ТекСтрока) Тогда
				
				// Проверяем со второй строки этой ветки до первой следующей.
				// Если эта ветка последняя - то до конца её.
				Если НомерВетки = КоличествоСтрок Тогда
					ПоследняяСтрока = ТекСтрока.ПоследняяСтрока;	
				Иначе
					ПоследняяСтрока = СтрокиДерева[НомерВетки].ПерваяСтрока;
				КонецЕсли;
	
				НайтиВызовыСервераВДиапозонеСтрок(МассивОшибок,ТекСтрока.ПерваяСтрока+1,ПоследняяСтрока);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Для Каждого Ошибка Из МассивОшибок Цикл
			ВывестиСообщение("Вызов сервера в цикле",
				Ошибка.Начало,
				Ошибка.Конец);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаПревышениеКоличестваВременныхТаблиц() Экспорт
	
	Для Каждого ОписаниеЗапроса Из ТаблицаЗапросов Цикл
		
		ТекстЗапрса = ОписаниеЗапроса.Текст;
		
		ЧислоПоместить = СтрЧислоВхождений(НРег(ТекстЗапрса),"поместить ");
		
		Если ЧислоПоместить > ПредельноеКоличествоВременныхТаблиц Тогда 
			ВывестиСообщение(СтрШаблон("Запрос содержит %1 временных таблиц",ЧислоПоместить),
				ОписаниеЗапроса.ПерваяСтрока,
				ОписаниеЗапроса.ПоследняяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ПроверкаЗапросов
&НаСервере
Процедура ПроверитьЗапросыВКодеНаСервере()	
	//СтруктураЗапросов.Очистить();
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = "\n{0,1}[^/\n]*?""\s*(ВЫБРАТЬ[\s\S]*?)""[\)\s]*;";
	RegExp.Global = Истина;
	RegExp.Multiline = Ложь;
	RegExp.IgnoreCase = Истина;
	ИсходнаяСтрока = ТекстовыйДокументВСтроку(ТекстМодуля);
	Matches = RegExp.Execute(ИсходнаяСтрока);
	
	Если Matches.Count = 0 Тогда
		Сообщить("Запросов не обнаружено!");
	КонецЕсли;
	
	Для Счетчик = 0 По Matches.Count - 1 Цикл 
		Match = Matches.Item(Счетчик);	
		//Если (СтруктураЗапросов.Количество() > 0 
		//		И СтруктураЗапросов[СтруктураЗапросов.Количество() - 1].КонечнаяПозиция - 1 <> Match.FirstIndex)
		//	ИЛИ (СтруктураЗапросов.Количество() = 0 И Match.FirstIndex <> 0) Тогда
		//	ПозицияПоследнегоСимвола = ?(СтруктураЗапросов.Количество() = 0,1,СтруктураЗапросов[СтруктураЗапросов.Количество() - 1].КонечнаяПозиция + 1);
		//	НоваяСтрока = СтруктураЗапросов.Добавить();
		//	НоваяСтрока.ЭтоЗапрос = Ложь;
		//	
		//	НоваяСтрока.НачальнаяПозиция = ПозицияПоследнегоСимвола;
		//	НоваяСтрока.КонечнаяПозиция = Match.FirstIndex + 1;	
		//	НоваяСтрока.Текст = Сред(ИсходнаяСтрока, НоваяСтрока.НачальнаяПозиция, НоваяСтрока.КонечнаяПозиция - НоваяСтрока.НачальнаяПозиция);  
		//	НоваяСтрока.НомерЗапроса = СтруктураЗапросов.Индекс(НоваяСтрока);
		//КонецЕсли;
		//
		//НоваяСтрока = СтруктураЗапросов.Добавить();
		//НоваяСтрока.ЭтоЗапрос = Истина;
		//НоваяСтрока.НачальнаяПозиция = Match.FirstIndex + 1;
		//НоваяСтрока.КонечнаяПозиция = Match.FirstIndex + Match.Length + 1;
		//НоваяСтрока.Текст = Сред(ИсходнаяСтрока, НоваяСтрока.НачальнаяПозиция, НоваяСтрока.КонечнаяПозиция - НоваяСтрока.НачальнаяПозиция); 
		//НоваяСтрока.НомерЗапроса = СтруктураЗапросов.Индекс(НоваяСтрока);

		
		ТекстЗапроса = Match.SubMatches.Item(0);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "|", " ");				
		ПроанализироватьТекстЗапроса(ТекстЗапроса, ИсходнаяСтрока);
	КонецЦикла;
	

	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапросыВКоде(Команда)
	ПроверитьЗапросыВКодеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроанализироватьТекстЗапроса(ТекстЗапроса, ИсходнаяСтрока)
	
	
	
		СхемаЗапроса = Новый СхемаЗапроса;
		Попытка
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПроцедуры", "КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа");
		Отбор.Вставить("Выбор", Истина);
		Если Проверки.НайтиСтроки(Отбор).Количество() > 0 Тогда
			КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа = Истина;	
		Иначе
			КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа = Ложь;
		КонецЕсли;
		
		Для каждого Пакет из СхемаЗапроса.ПакетЗапросов Цикл
			Если ТипЗнч(Пакет) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Оператор из Пакет.Операторы Цикл
				
				Для каждого ВыбираемоеПоле из Оператор.ВыбираемыеПоля Цикл
					Если КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа Тогда
						ПроанализироватьПолеЗапроса(ВыбираемоеПоле, Оператор, ИсходнаяСтрока);
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Условие из Оператор.Отбор Цикл
					Если КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа Тогда
						ПроанализироватьПолеЗапроса(Условие, Оператор, ИсходнаяСтрока);
					КонецЕсли;
				КонецЦикла;
					
			КонецЦикла;
		КонецЦикла;
			
КонецПроцедуры
	
&НаСервере
Функция  ЗаменитьТекстВПолеЗапроса(ТекстПоля)
	//RegExp = Новый COMОбъект("VBScript.RegExp");
	//RegExp.Pattern = """[\s\S]*?""";
	//RegExp.Multiline = Истина;
	//RegExp.IgnoreCase = Истина;
	//RegExp.Global = Истина;

	//Возврат RegExp.Replace(ТекстПоля, "&Текст");
	
	Возврат ЗаменитьТекст(ТекстПоля, """[\s\S]*?""", "&Текст"); 
КонецФункции

&НаСервере
Функция  ЗаменитьОператорЗначениеВПолеЗапроса(ТекстПоля)
	//RegExp = Новый COMОбъект("VBScript.RegExp");
	//RegExp.Pattern = "Значение([\s\S]*?)";
	//RegExp.Multiline = Истина;
	//RegExp.IgnoreCase = Истина;
	//RegExp.Global = Истина;
	//Возврат RegExp.Replace(ТекстПоля, "&Значение");
	Возврат ЗаменитьТекст(ТекстПоля, "Значение([\s\S]*?)", "&Значение"); 
КонецФункции

&НаСервере
Функция НайтиСовпадения(Текст, Шаблон, ИскатьПоВсемуТексту = Истина)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = Шаблон;
	RegExp.Multiline = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Global = ИскатьПоВсемуТексту;
	
	НайденныеСовпадения = Новый Массив;
	
	Matches = RegExp.Execute(Текст);
	Для Счетчик = 0 По Matches.Count - 1 Цикл 
		Match = Matches.Item(Счетчик);
		НайденныеСовпадения.Добавить(Match.Value);												
	КонецЦикла;

	Возврат НайденныеСовпадения;
	
КонецФункции

&НаСервере
Функция ЗаменитьТекст(Текст, Шаблон, СтрокаЗамены, ИскатьПоВсемуТексту = Истина)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = Шаблон;
	RegExp.Multiline = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Global = ИскатьПоВсемуТексту;
	
	Возврат RegExp.Replace(Текст, СтрокаЗамены);
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТочек(Текст)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = "\.";
	RegExp.Multiline = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Global = Истина;
	Matches = RegExp.Execute(Текст);
					//Для Счетчик = 0 По Matches.Count - 1 Цикл 
	Возврат Matches.Count;
	
КонецФункции

&НаСервере
Процедура ПроверитьТекстЗапросаНаСервере()
	ПроанализироватьТекстЗапроса(ТекстМодуля, "");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТекстЗапроса(Команда)
	ПроверитьТекстЗапросаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроанализироватьПолеЗапроса(ПолеЗапроса, Оператор, ИсходнаяСтрока)
	
	СтрокаПоле = Строка(ПолеЗапроса);
	СтрокаПоле = ЗаменитьТекстВПолеЗапроса(СтрокаПоле);
	СтрокаПоле = ЗаменитьОператорЗначениеВПолеЗапроса(СтрокаПоле);
	НайденныеПоляСТочками = НайтиСовпадения(СтрокаПоле,  "[\wа-яА-Я]*\.[\wа-яА-Я]*\.[\wа-яА-Я\.]+"); 
	Для каждого ПутьКДанным из НайденныеПоляСТочками Цикл
		ИсточникТекст = НайтиСовпадения(ПутьКДанным,"[\wа-яА-Я]*", Ложь);
		Попытка					
			ИсточникДанных = Оператор.Источники.НайтиПоПсевдониму(ИсточникТекст[0]);
		Исключение
			Для каждого ИсточникДанных из Оператор.Источники Цикл
				Если ИсточникДанных.Источник.Псевдоним = ИсточникТекст[0] Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецПопытки;
		ТекущийПуть = ИсточникТекст[0];
		КоличествоТочек = ПолучитьКоличествоТочек(ПутьКДанным);
		Адрес = ЗаменитьТекст(ПутьКДанным,ИсточникТекст[0] + "\." , "", Ложь);//СтрЗаменить(ПутьКДанным, ИсточникТекст[0] + ".", "");
		ПервоеПолеМассив = НайтиСовпадения(Адрес, "[\wа-яА-Я]*", Ложь);
		ПервоеПоле = ПервоеПолеМассив[0]; 
		ТекущийПуть = ТекущийПуть + "." + ПервоеПолеМассив[0];
		Попытка
			// Здесь должно быть условие на проверку версии платформы
			ПолеСхемыЗапроса = ИсточникДанных.Источник.ДоступныеПоля.Найти(ПервоеПоле);
		Исключение
			Для каждого ПолеСхемыЗапроса из ИсточникДанных.Источник.ДоступныеПоля Цикл
				Если ПолеСхемыЗапроса.Имя = ПервоеПоле Тогда 
					Прервать; 
				КонецЕсли;
			КонецЦикла;
		КонецПопытки;
		ТекущееПоле = ПервоеПоле;
		Если ПолеСхемыЗапроса.ТипЗначения.Типы().Количество() > 1 Тогда
			Сообщить("Получение данных через точку от составного типа " + ПутьКДанным);
			НоваяСтрока = Сообщения.Добавить();
			НоваяСтрока.Сообщение = "Получение данных через точку от составного типа";
			НоваяСтрока.НомерСтроки = НайтиСтрокуВТекстовомДокументе(ПутьКДанным);
			
			
			//НоваяСтрока = ПоляСоставногоТипа.Добавить();
			//НоваяСтрока.НомерЗапроса = НомерЗапроса;
			//НоваяСтрока.НеоптимальноеПоле = ТекущийПуть;
			//
			//Адрес2 = ЗаменитьТекст(Адрес, ПолеСхемыЗапроса.Имя + "\." , "", Ложь);
			//ПолеМассив = НайтиСовпадения(Адрес2, "[\wа-яА-Я]*", Ложь);
			//Поле = ПолеМассив[0];	
			//
			//НоваяСтрока.ВариантИсправления = СформироватьВариантИсправленияПоляСоставногоТипа(ТекущийПуть, ПолеСхемыЗапроса.ТипЗначения.Типы(), Поле);
		КонецЕсли;
		КоличествоТочек = КоличествоТочек - 2;
		
		Пока КоличествоТочек > 0 Цикл
			Адрес = ЗаменитьТекст(Адрес, ПолеСхемыЗапроса.Имя + "\." , "", Ложь);
			ПолеМассив = НайтиСовпадения(Адрес, "[\wа-яА-Я]*", Ложь);
			Поле = ПолеМассив[0];
			
			Попытка
				// Здесь должно быть условие на проверку версии платформы
				ПолеСхемыЗапроса = ПолеСхемыЗапроса.Поля.Найти(Поле);
			Исключение
				Для каждого ПолеСхемыЗапроса из ПолеСхемыЗапроса.Поля Цикл
					Если ПолеСхемыЗапроса.Имя = Поле Тогда 
						Прервать; 
					КонецЕсли;
				КонецЦикла;	
			КонецПопытки;
			ТекущийПуть = ТекущийПуть + "." + Поле;
			ТекущееПоле = Поле;
			Если ПолеСхемыЗапроса.ТипЗначения.Типы().Количество() > 1 Тогда
				Сообщить("Получение данных через точку от составного типа " + ПутьКДанным);
				
				НоваяСтрока = Сообщения.Добавить();
				НоваяСтрока.Сообщение = "Получение данных через точку от составного типа";
				НоваяСтрока.НомерСтроки = НайтиСтрокуВТекстовомДокументе(ПутьКДанным);

				//НоваяСтрока = ПоляСоставногоТипа.Добавить();
				//НоваяСтрока.НомерЗапроса = НомерЗапроса;
				//НоваяСтрока.НеоптимальноеПоле = ТекущийПуть;
				//Адрес2 = ЗаменитьТекст(Адрес, ПолеСхемыЗапроса.Имя + "\." , "", Ложь);
				//ПолеМассив = НайтиСовпадения(Адрес2, "[\wа-яА-Я]*", Ложь);
				//Поле = ПолеМассив[0];	
				//НоваяСтрока.ВариантИсправления = СформироватьВариантИсправленияПоляСоставногоТипа(ТекущийПуть, ПолеСхемыЗапроса.ТипЗначения.Типы(), Поле);		
			КонецЕсли;
			
			КоличествоТочек = КоличествоТочек - 1;	
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ТекстМодуля;
	ТекущаяСтрока = Элементы.СтруктураЗапросов.ТекущиеДанные;
	Элементы.ТекстМодуля.УстановитьГраницыВыделения(ТекущаяСтрока.НачальнаяПозиция, ТекущаяСтрока.КонечнаяПозиция);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьВариантИсправленияПоляСоставногоТипа(Путь, Типы, ТекущееПоле)
	
	
	ТекстДляЗамены = "(ВЫБОР ";
	Для каждого Тип из Типы Цикл
		
		ТипСтрокой = ПреобразоватьТипВСтроку(Тип);
		Если ТипСтрокой <> "" Тогда
			ТекстДляЗамены = ТекстДляЗамены + СтрШаблон(" КОГДА %1 ССЫЛКА %2 ТОГДА (ВЫРАЗИТЬ(%1 КАК %2)).%3", Путь, ТипСтрокой, ТекущееПоле);
		КонецЕсли;
	КонецЦикла;
	
	ТекстДляЗамены = ТекстДляЗамены + " КОНЕЦ)";
	
	Возврат ТекстДляЗамены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьТипВСтроку(Тип)
	
	ТипСтрокой = "";
	
	Если Метаданные.Справочники.Найти(Тип) <> Неопределено Тогда
		ТипСтрокой = "Справочник." + Тип;
	ИначеЕсли Метаданные.Документы.Найти(Тип) <> Неопределено Тогда
		ТипСтрокой = "Документ." + Тип;
	КонецЕсли;
	
	Возврат ТипСтрокой;	
	
КонецФункции

&НаКлиенте
Процедура КонтрольНаПолучениеЧерезТочкуОтПолейСоставногоТипа()
	ПроверитьЗапросыВКодеНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстовыйДокументВСтроку(ТекстовыйДокумент)
	
	СтрокаТекст = "";
	Для Номер = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
        СтрокаТекст = СтрокаТекст + ТекстовыйДокумент.ПолучитьСтроку(Номер);
	КонецЦикла;
	Возврат СтрокаТекст;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВТекстовомДокументе(Строка)
	Для Номер = 1 По ТекстМодуля.КоличествоСтрок() Цикл
        Позиция = СтрНайти(ТекстМодуля.ПолучитьСтроку(Номер), Строка);
		Если Позиция <> 0 Тогда
			Возврат Номер;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
	
КонецФункции

#КонецОбласти
